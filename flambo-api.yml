swagger: "2.0"
info:
  title: flambo
  version: 1.0.0
  description: flambo API
host: localhost:3000
basePath: /api/v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  JWT:
    type: apiKey
    name: Authorization
    in: header
paths:
  /collections:
    get:
      description: Returns collections
      tags: [collections]
      operationId: findCollections
      security:
        - JWT: []
      responses:
        200:
          description: collections response
          schema:
            type: array
            items:
              $ref: '#/definitions/Collection'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /collections/{id}:
    get:
      description: Returns a collection based on a single ID
      tags: [collections]
      operationId: getCollection
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          description: ID of collection
          required: true
          type: string
      responses:
        200:
          description: collection response
          schema:
            $ref: '#/definitions/Collection'
        404:
          description: no collection found matching ID
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /topics:
    get:
      description: Returns all available topics
      tags: [topics]
      operationId: findTopics
      security:
        - JWT: []
      parameters: []
      responses:
        200:
          description: topics response
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new topic
      tags: [topics]
      operationId: addTopic
      parameters:
        - name: topic
          in: body
          description: Topic to add
          required: true
          schema:
            $ref: '#/definitions/NewTopic'
      responses:
        201:
          description: topic response
          schema:
            $ref: '#/definitions/Topic'
        400:
          description: validation errors
          schema:
            $ref: '#/definitions/ValidationErrors'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /topics/{id}:
    get:
      description: Returns a topic based on a single ID
      tags: [topics]
      operationId: getTopic
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          description: ID of topic
          required: true
          type: string
      responses:
        200:
          description: topic response
          schema:
            $ref: '#/definitions/Topic'
        404:
          description: no topic found matching ID
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /topics/{id}/news_items:
    get:
      description: Returns topic news items
      tags: [topics, news items]
      operationId: getTopicNewsItems
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          description: ID of topic
          required: true
          type: string
      responses:
        200:
          description: news items response
          schema:
            type: array
            items:
              $ref: '#/definitions/NewsItem'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /topics/{id}/news_items/stats:
    get:
      description: Returns topic news items statistics
      tags: [topics, news items]
      operationId: getTopicNewsItemsStatistics
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          description: ID of topic
          required: true
          type: string
      responses:
        200:
          description: news items statistics response
          schema:
            $ref: '#/definitions/NewsItemStatistics'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /sources:
    get:
      description: Returns all available sources
      tags: [sources]
      operationId: findSources
      security:
        - JWT: []
      parameters: []
      responses:
        200:
          description: sources response
          schema:
            type: array
            items:
              $ref: '#/definitions/Source'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new source
      tags: [sources]
      operationId: addSource
      security:
        - JWT: []
      parameters:
        - name: source
          in: body
          description: Source to add
          required: true
          schema:
            $ref: '#/definitions/NewSource'
      responses:
        201:
          description: source response
          schema:
            $ref: '#/definitions/Source'
        400:
          description: validation errors
          schema:
            $ref: '#/definitions/ValidationErrors'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /sources/{id}:
    get:
      description: Returns a source based on a single ID
      tags: [sources]
      operationId: getSource
      parameters:
        - name: id
          in: path
          description: ID of source
          required: true
          type: string
      responses:
        200:
          description: source response
          schema:
            $ref: '#/definitions/Source'
        404:
          description: no source found matching ID
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    get:
      description: Returns all users
      tags: [users]
      operationId: findUsers
      security:
        - JWT: []
      parameters: []
      responses:
        200:
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}:
    get:
      description: Returns a user based on a single ID
      tags: [users]
      operationId: getUser
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          type: string
      responses:
        200:
          description: user response
          schema:
            $ref: '#/definitions/User'
        404:
          description: no user found matching ID
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  ValidationErrors:
    properties:
      errors:
        type: array
        items:
          properties:
            path:
              type: string
            message:
              type: string
            type:
              type: string
  Collection:
    properties:
      id:
        type: string
      name:
        type: string
      createdAt:
        type: string
  NewsItem:
    properties:
      id:
        type: string
  NewsItemStatistics:
    properties:
      months:
        type: array
      sourceTypes:
        type: array
  User:
    required:
      - id
      - name
      - email
      - createdAt
    properties:
      id:
        type: string
      name:
        type: string
      createdAt:
        type: string
      email:
        type: string
      gravatarUrl:
        type: string
      loginAttempts:
        type: number
  Source:
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
        enum:
          - rss
          - twitter
      createdAt:
        type: string
  NewSource:
    required:
      - name
      - type
      - data
    properties:
      name:
        type: string
      type:
        type: string
        enum:
          - rss
          - twitter
      data:
        type: object
  Topic:
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      createdAt:
        type: string
      picture:
        type: string
      userId:
        type: string
  NewTopic:
    required:
      - name
      - description
      - sources
    properties:
      name:
        type: string
      description:
        type: string
      sources:
        type: array
        items:
          type: string
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
